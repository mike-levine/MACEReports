}
#define a border to add above and below caption and at bottom of table
table_border = officer::fp_border(color="black", width = 0.75)
#make the nums-at-length table into a flextable
nums_length_table = flextable::flextable(nums_for_presentation)%>%
#append totals as a footer row
flextable::add_footer_row(top = FALSE, values = col_sums, colwidths = rep(1,length(nums_for_presentation)))%>%
#get rid of padding around cells
flextable::padding(padding = 0, part = "all")%>%
#align text: center justify everything
flextable::align(align = 'center', part = 'all')%>%
#add horizontal border on top and bottom of table
flextable::hline_top(part="all", border = table_border)%>%
flextable::hline_bottom(part="all", border = table_border)
#create a function to format catch weights and percents and numbers percents conditionally:
#if values = NA, label as '-'
#If values are <=0.01, label as '<0.01';
#otherwise, format the value as having a single decimal point for display;
pretty_nums_function = function(x) ifelse(x > 0.01 | is.na(x),
ifelse(is.na(x), '-', formatC(x, format="f", digits = 2, big.mark=",")),
'<0.01')
#to format all the columns that could exist (i.e. different years will have different numbers of reporting columns),
#we need a named list of column names and the function to apply to said column;
#this needs to skip the first column too (no need to format 'Length')
funs_list =  stats::setNames(rep(list(pretty_nums_function),
length(names(nums_for_presentation))-1),
names(nums_for_presentation)[-1])
#apply this function to the specfied table columns
nums_length_table = flextable::set_formatter(nums_length_table, values = funs_list)%>%
#set the font and font size
flextable::font(fontname = 'times', part = 'all')%>%
flextable::fontsize(size = 10, part = 'header')%>%
flextable::fontsize(size = 10, part = 'body')
#build the caption
cap_text = paste0('Pollock numbers-at-length estimates (millions of fish) by survey region during the ',
unique(biomass_nums_data$year), ' GOA survey.' )
nums_length_table
source("~/github/MACEReports/R/build_numbers_at_length_table_summer_goa.R")
biomass_nums_data = current_survey_pollock_biomass_nums
#build the
biomass_nums_table_list = build_numbers_at_length_table_summer_goa(biomass_nums_data = current_survey_pollock_biomass_nums)
biomass_nums_table =  biomass_nums_table_list[[1]]
biomass_nums_caption = biomass_nums_table_list[[2]]
biomass_nums_table
biomass_nums_caption
library(MACEReports)
test_dat = template_df_numbers_biomass_at_length_tables_summer_goa[,1:6]
build_numbers_at_length_table_summer_goa(biomass_nums_data = test_dat)
test_dat = template_df_numbers_biomass_at_length_tables_summer_goa[,1:7]
build_numbers_at_length_table_summer_goa(biomass_nums_data = test_dat)
test_dat = test_dat = template_df_numbers_biomass_at_length_tables_summer_goa[,1:7]
testthat::expect_error(
build_numbers_at_length_table_summer_goa(biomass_nums_data = test_dat),
'biomass_nums_data is missing NUMBERS column'
)
testthat::test_that("errors", {
test_dat = test_dat = template_df_numbers_biomass_at_length_tables_summer_goa[,1:7]
testthat::expect_error(
build_numbers_at_length_table_summer_goa(biomass_nums_data = test_dat),
'biomass_nums_data is missing NUMBERS column'
)
})
testthat::test_that("errors", {
test_dat = template_df_numbers_biomass_at_length_tables_summer_goa[,1:7]
testthat::expect_error(
build_numbers_at_length_table_summer_goa(biomass_nums_data = test_dat),
'biomass_nums_data is missing NUMBERS column'
)
test
})
test_dat = template_df_numbers_biomass_at_length_tables_summer_goa[,1:7]
testthat::expect_error(
build_numbers_at_length_table_summer_goa(biomass_nums_data = test_dat),
'biomass_nums_data is missing NUMBERS column'
)
testthat::test_that("errors", {
test_dat = template_df_numbers_biomass_at_length_tables_summer_goa[,1:7]
testthat::expect_error(
build_numbers_at_length_table_summer_goa(biomass_nums_data = test_dat),
'biomass_nums_data is missing NUMBERS column'
)
})
test_dat = template_df_numbers_biomass_at_length_tables_summer_goa
test_dat$BIOMASS = as.character(test_dat$BIOMASS)
build_numbers_at_length_table_summer_goa(biomass_nums_data = test_dat)
testthat::test_that("errors", {
test_dat = template_df_numbers_biomass_at_length_tables_summer_goa[,1:7]
testthat::expect_error(
build_numbers_at_length_table_summer_goa(biomass_nums_data = test_dat),
'biomass_nums_data is missing NUMBERS column'
)
test_dat = template_df_numbers_biomass_at_length_tables_summer_goa
test_dat$BIOMASS = as.character(test_dat$BIOMASS)
testthat::expect_error(
build_numbers_at_length_table_summer_goa(biomass_nums_data = test_dat),
'Wrong data type in biomass_nums_data: BIOMASS. Values should be: numeric'
)
})
test_dat = template_df_numbers_biomass_at_length_tables_summer_goa
test_dat$SURVEY[1]
test_dat$SURVEY[1] = 202207
build_numbers_at_length_table_summer_goa(biomass_nums_data = test_dat),
build_numbers_at_length_table_summer_goa(biomass_nums_data = test_dat)
testthat::test_that("errors", {
test_dat = template_df_numbers_biomass_at_length_tables_summer_goa[,1:7]
testthat::expect_error(
build_numbers_at_length_table_summer_goa(biomass_nums_data = test_dat),
'biomass_nums_data is missing NUMBERS column'
)
test_dat = template_df_numbers_biomass_at_length_tables_summer_goa
test_dat$BIOMASS = as.character(test_dat$BIOMASS)
testthat::expect_error(
build_numbers_at_length_table_summer_goa(biomass_nums_data = test_dat),
'Wrong data type in biomass_nums_data: BIOMASS. Values should be: numeric'
)
test_dat = template_df_numbers_biomass_at_length_tables_summer_goa
test_dat$SURVEY[1] = 202207
testthat::expect_error(
build_numbers_at_length_table_summer_goa(biomass_nums_data = test_dat),
'biomass_nums_data contains multiple species surveys: "202207", "202104"'
)
})
test_dat = template_df_numbers_biomass_at_length_tables_summer_goa
test_dat$SPECIES_CODE[2]
test_dat$SPECIES_CODE = 21110
build_numbers_at_length_table_summer_goa(biomass_nums_data = test_dat)
testthat::test_that("warnings", {
test_dat = template_df_numbers_biomass_at_length_tables_summer_goa
test_dat$SPECIES_CODE = 21110
testthat::expect_warning(
build_numbers_at_length_table_summer_goa(biomass_nums_data = test_dat),
'You are printing a table for species code 21110 not walleye pollock! Is this okay'
)
})
source("~/github/MACEReports/R/build_numbers_at_length_table_summer_goa.R")
library(MACEReports)
library(MACEReports)
#library(MACEReports)
#
# #this checks that we have all the right dataframes, and they are in the right format
survey_RData_file = 'G:/MikeLevine/testing/202104_GOA_summer_data.RData'
#
#
# #open up the .Rdata file provided
load(survey_RData_file)
biomass_nums_data = current_survey_pollock_biomass_nums
#check input dataframe against the template dataframe: this will make sure the input
#data can actually be used to create a table, and will return errors if not
check_data = template_df_numbers_biomass_at_length_tables_summer_goa
check_data = MACEReports::template_df_numbers_biomass_at_length_tables_summer_goa
check_input_df(template_df = check_data, input_df = biomass_nums_data)
library(MACEReports)
#check input dataframe against the template dataframe: this will make sure the input
#data can actually be used to create a table, and will return errors if not
check_data = template_df_numbers_biomass_at_length_tables_summer_goa
check_input_df(template_df = check_data, input_df = biomass_nums_data)
#library(MACEReports)
#
# #this checks that we have all the right dataframes, and they are in the right format
survey_RData_file = 'G:/MikeLevine/testing/202104_GOA_summer_data.RData'
#
#
# #open up the .Rdata file provided
load(survey_RData_file)
#
#
# #open up the .Rdata file provided
load(survey_RData_file)
biomass_nums_data = current_survey_pollock_biomass_nums
#check input dataframe against the template dataframe: this will make sure the input
#data can actually be used to create a table, and will return errors if not
check_data = template_df_numbers_biomass_at_length_tables_summer_goa
check_input_df(template_df = check_data, input_df = biomass_nums_data)
#check- make sure there's only one species, warn if not pollock
species_list = unique(biomass_nums_data$SPECIES_CODE)
if (length(species_list) > 1){
stop(paste0('biomass_nums_data contains multiple species codes: ',
paste(shQuote(species_list), collapse=", "), '\n'))
}
if (species_list != 21740){
warning('You are printing a table for species code ', species_list, ' not walleye pollock! Is this okay?')
}
#check: make sure only one survey year
if (length(unique(biomass_nums_data$SURVEY)) > 1){
stop(paste0('biomass_nums_data contains multiple species surveys: ',
paste(shQuote(unique(biomass_nums_data$SURVEY)), collapse=", "), '\n'))
}
library(magrittr)
biomass_nums_data = biomass_nums_data[1,4:6]
check_input_df(template_df = check_data, input_df = biomass_nums_data)
biomass_nums_data = current_survey_pollock_biomass_nums
#check input dataframe against the template dataframe: this will make sure the input
#data can actually be used to create a table, and will return errors if not
check_data = template_df_numbers_biomass_at_length_tables_summer_goa
check_input_df(template_df = check_data, input_df = biomass_nums_data)
#check- make sure there's only one species, warn if not pollock
species_list = unique(biomass_nums_data$SPECIES_CODE)
if (length(species_list) > 1){
stop(paste0('biomass_nums_data contains multiple species codes: ',
paste(shQuote(species_list), collapse=", "), '\n'))
}
if (species_list != 21740){
warning('You are printing a table for species code ', species_list, ' not walleye pollock! Is this okay?')
}
#check: make sure only one survey year
if (length(unique(biomass_nums_data$SURVEY)) > 1){
stop(paste0('biomass_nums_data contains multiple species surveys: ',
paste(shQuote(unique(biomass_nums_data$SURVEY)), collapse=", "), '\n'))
}
#######
#step 1: sum biomass vertically by interval, length bin; report as biomass (t)
biomass_summary = biomass_nums_data%>%
dplyr::group_by(.data$report_number, .data$region, .data$LENGTH)%>%
dplyr::summarize(biomass_t = sum(.data$BIOMASS)/1e3)%>%
dplyr::arrange(report_number, .data$LENGTH)
#add a totals column as well
table_totals = biomass_summary%>%
dplyr::group_by(.data$LENGTH)%>%
dplyr::summarize(Total = sum(.data$biomass_t))
source("~/github/MACEReports/R/build_numbers_at_length_table_summer_goa.R")
min(biomass_summary$LENGTH)
#build a dataframe that's simply each possible length per region
get_all_possible_lengths_for_region = function(region_name){
#set the minimum length at 10 cm UNLESS there are smaller fish in the survey
min_report_length = ifelse(min(biomass_summary$LENGTH) < 10,
min(biomass_summary$LENGTH),
10)
#set the maximum length as 70 cm UNLESS there are larger fish in the survey
max_report_length = ifelse(max(biomass_summary$LENGTH > 70),
max(biomass_summary$LENGTH),
70)
#build a dataframe that has the length vector and report name
report_lengths = data.frame(seq(min_report_length, max_report_length, 1))
colnames(report_lengths) = c("LENGTH")
report_lengths$region = region_name
#and return this dataframe
return(report_lengths)
}
#build a dataframe that's simply each possible length per region
get_all_possible_lengths_for_region = function(region_name){
#set the minimum length at 10 cm UNLESS there are smaller fish in the survey
min_report_length = ifelse(min(biomass_summary$LENGTH) < 10,
min(biomass_summary$LENGTH),
10)
#set the maximum length as 70 cm UNLESS there are larger fish in the survey
max_report_length = ifelse(max(biomass_summary$LENGTH > 70),
max(biomass_summary$LENGTH),
70)
#build a dataframe that has the length vector and report name
report_lengths = data.frame(seq(min_report_length, max_report_length, 1))
colnames(report_lengths) = c("LENGTH")
report_lengths$region = region_name
#and return this dataframe
return(report_lengths)
}
#apply function to get dataframe of lengths
report_lengths_for_regions = purrr::map_dfr(unique(biomass_summary$region), get_all_possible_lengths_for_region)
#and add the blank rows where no fish were observed
biomass_summary = left_join(report_lengths_for_regions, biomass_summary, by = c('LENGTH', 'region'))
#and add the blank rows where no fish were observed
biomass_summary = dplyr::left_join(report_lengths_for_regions, biomass_summary, by = c('LENGTH', 'region'))
#for presentation, we just want numbers (millions) for each length bin (10-70 cm and geographic area)
biomass_for_presentation = biomass_summary%>%
#remove the report_number column- it was only needed to order things by report number
dplyr::select(.data$LENGTH, .data$region, .data$biomass_t)%>%
#also, go from 'long' format (where every region lives in it's own)
tidyr::pivot_wider(id_cols = .data$LENGTH, names_from = .data$region, values_from = .data$biomass_t)
#join totals to the 'wide' dataframe
biomass_for_presentation = dplyr::left_join(biomass_for_presentation, table_totals, by = c('LENGTH'))
#rename LENGTH to a nicer title for plotting
biomass_for_presentation = biomass_for_presentation%>%
dplyr::rename('Length' = 'LENGTH')
col_sums= c('Total')
for (i in 2:ncol(biomass_for_presentation)){
#get the column summed; format for table
col_sum_formatted = format(sum(biomass_for_presentation[,i], na.rm = TRUE), big.mark = ",",  na_str = '-', nsmall = 2, digits = 2, scientific = FALSE)
#add it to the collection of formatted sums
col_sums = cbind(col_sums, col_sum_formatted)
}
col_sums
#define a border to use above and below caption and at bottom of table
table_border = officer::fp_border(color="black", width = 0.75)
#make the nums-at-length table into a flextable
biomass_length_table = flextable(biomass_for_presentation)
#make the nums-at-length table into a flextable
biomass_length_table = flextable::flextable(biomass_for_presentation)
#make the nums-at-length table into a flextable
biomass_length_table = flextable::flextable(biomass_for_presentation)%>%
#append totals as a footer row
flextable::add_footer_row(top = FALSE, values = col_sums, colwidths = rep(1,length(biomass_for_presentation)))
#make the nums-at-length table into a flextable
biomass_length_table = flextable::flextable(biomass_for_presentation)%>%
#append totals as a footer row
flextable::add_footer_row(top = FALSE, values = col_sums, colwidths = rep(1,length(biomass_for_presentation)))%>%
#get rid of padding around cells
flextable::padding(padding = 0, part = "all")%>%
#align text: center justify everything
flextable::align(align = 'center', part = 'all')%>%
#add horizontal border on top and bottom of table
flextable::hline_top(part="all", border = table_border)%>%
flextable::hline_bottom(part="all", border = table_border)
#create a function to format catch weights and percents and numbers percents conditionally:
#if values = NA, label as '-'
#If values are <=0.01, label as '<0.01';
#otherwise, format the value as having a single decimal point for display;
pretty_nums_function = function(x) ifelse(x > 0.01 | is.na(x),
ifelse(is.na(x), '-', formatC(x, format="f", digits = 2, big.mark=",")),
'<0.01')
#to format all the columns that could exist (i.e. different years will have different numbers of reporting columns),
#we need a named list of column names and the function to apply to said column;
#this needs to skip the first column too (no need to format 'Length')
funs_list =  stats::setNames(rep(list(pretty_nums_function), length(names(biomass_for_presentation))-1),
names(biomass_for_presentation)[-1])
#apply this function to the specfied table columns
biomass_length_table = flextable::set_formatter(biomass_length_table, values = funs_list)
#make the nums-at-length table into a flextable
biomass_length_table = flextable::flextable(biomass_for_presentation)%>%
#append totals as a footer row
flextable::add_footer_row(top = FALSE, values = col_sums, colwidths = rep(1,length(biomass_for_presentation)))%>%
#get rid of padding around cells
flextable::padding(padding = 0, part = "all")%>%
#align text: center justify everything
flextable::align(align = 'center', part = 'all')%>%
#add horizontal border on top and bottom of table
flextable::hline_top(part="all", border = table_border)%>%
flextable::hline_bottom(part="all", border = table_border)
#make the biomass-at-length summary into a flextable
biomass_length_table = flextable::flextable(biomass_for_presentation)%>%
#append totals as a footer row
flextable::add_footer_row(top = FALSE, values = col_sums, colwidths = rep(1,length(biomass_for_presentation)))%>%
#get rid of padding around cells
flextable::padding(padding = 0, part = "all")%>%
#align text: center justify everything
flextable::align(align = 'center', part = 'all')%>%
#add horizontal border on top and bottom of table
flextable::hline_top(part="all", border = table_border)%>%
flextable::hline_bottom(part="all", border = table_border)
#create a function to format catch weights and percents and numbers percents conditionally:
#if values = NA, label as '-'
#If values are <=0.01, label as '<0.01';
#otherwise, format the value as having a single decimal point for display;
pretty_nums_function = function(x) ifelse(x > 0.01 | is.na(x),
ifelse(is.na(x), '-', formatC(x, format="f", digits = 2, big.mark=",")),
'<0.01')
#to format all the columns that could exist (i.e. different years will have different numbers of reporting columns),
#we need a named list of column names and the function to apply to said column;
#this needs to skip the first column too (no need to format 'Length')
funs_list =  stats::setNames(rep(list(pretty_nums_function), length(names(biomass_for_presentation))-1),
names(biomass_for_presentation)[-1])
#apply this function to the specfied table columns
biomass_length_table = flextable::set_formatter(biomass_length_table, values = funs_list)%>%
#set the font and font size
flextable::font(fontname = 'times', part = 'all')%>%
flextable::fontsize(size = 10, part = 'header')%>%
flextable::fontsize(size = 10, part = 'body')
biomass_length_table
#build the caption
cap_text = paste0('Pollock biomass-at-length estimates (metric tons) by survey region during the ',
unique(biomass_nums_data$year), ' GOA survey.' )
build_biomass_at_length_table_summer_goa = function(biomass_nums_data){
#data checks:
#check input dataframe against the template dataframe: this will make sure the input
#data can actually be used to create a table, and will return errors if not
check_data = template_df_numbers_biomass_at_length_tables_summer_goa
check_input_df(template_df = check_data, input_df = biomass_nums_data)
#check- make sure there's only one species, warn if not pollock
species_list = unique(biomass_nums_data$SPECIES_CODE)
if (length(species_list) > 1){
stop(paste0('biomass_nums_data contains multiple species codes: ',
paste(shQuote(species_list), collapse=", "), '\n'))
}
if (species_list != 21740){
warning('You are printing a table for species code ', species_list, ' not walleye pollock! Is this okay?')
}
#check: make sure only one survey year
if (length(unique(biomass_nums_data$SURVEY)) > 1){
stop(paste0('biomass_nums_data contains multiple species surveys: ',
paste(shQuote(unique(biomass_nums_data$SURVEY)), collapse=", "), '\n'))
}
#######
#step 1: sum biomass vertically by interval, length bin; report as biomass (t)
biomass_summary = biomass_nums_data%>%
dplyr::group_by(.data$report_number, .data$region, .data$LENGTH)%>%
dplyr::summarize(biomass_t = sum(.data$BIOMASS)/1e3)%>%
dplyr::arrange(report_number, .data$LENGTH)
#add a totals column as well
table_totals = biomass_summary%>%
dplyr::group_by(.data$LENGTH)%>%
dplyr::summarize(Total = sum(.data$biomass_t))
#####
#step 2: get vectors of every possible length in the survey areas:
#we report all lengths from 10-70 cm; it's unlikely that any given survey contains all these,
#but we want to report a blank in these cases
#build a dataframe that's simply each possible length per region
get_all_possible_lengths_for_region = function(region_name){
#set the minimum length at 10 cm UNLESS there are smaller fish in the survey
min_report_length = ifelse(min(biomass_summary$LENGTH) < 10,
min(biomass_summary$LENGTH),
10)
#set the maximum length as 70 cm UNLESS there are larger fish in the survey
max_report_length = ifelse(max(biomass_summary$LENGTH > 70),
max(biomass_summary$LENGTH),
70)
#build a dataframe that has the length vector and report name
report_lengths = data.frame(seq(min_report_length, max_report_length, 1))
colnames(report_lengths) = c("LENGTH")
report_lengths$region = region_name
#and return this dataframe
return(report_lengths)
}
#apply function to get dataframe of lengths
report_lengths_for_regions = purrr::map_dfr(unique(biomass_summary$region), get_all_possible_lengths_for_region)
#and add the blank rows where no fish were observed
biomass_summary = dplyr::left_join(report_lengths_for_regions, biomass_summary, by = c('LENGTH', 'region'))
#######
#3. make the table
#for presentation, we just want numbers (millions) for each length bin (10-70 cm and geographic area)
biomass_for_presentation = biomass_summary%>%
#remove the report_number column- it was only needed to order things by report number
dplyr::select(.data$LENGTH, .data$region, .data$biomass_t)%>%
#also, go from 'long' format (where every region lives in it's own)
tidyr::pivot_wider(id_cols = .data$LENGTH, names_from = .data$region, values_from = .data$biomass_t)
#join totals to the 'wide' dataframe
biomass_for_presentation = dplyr::left_join(biomass_for_presentation, table_totals, by = c('LENGTH'))
#rename LENGTH to a nicer title for plotting
biomass_for_presentation = biomass_for_presentation%>%
dplyr::rename('Length' = 'LENGTH')
#calculate a row of sums for the bottom of table. Note na.rm = TRUE (because there are lots
#of na's, which is fine)
#this will sum up every column in the survey, except for the first (which is the Length column)
#we'll just add 'Total' here  to represent the length column, and add up the rest as their own column
# do this in a loop as the number of survey areas (i.e. columns in table) can differ annually
col_sums= c('Total')
for (i in 2:ncol(biomass_for_presentation)){
#get the column summed; format for table
col_sum_formatted = format(sum(biomass_for_presentation[,i], na.rm = TRUE), big.mark = ",",  na_str = '-', nsmall = 2, digits = 2, scientific = FALSE)
#add it to the collection of formatted sums
col_sums = cbind(col_sums, col_sum_formatted)
}
#define a border to use above and below caption and at bottom of table
table_border = officer::fp_border(color="black", width = 0.75)
#make the biomass-at-length summary into a flextable
biomass_length_table = flextable::flextable(biomass_for_presentation)%>%
#append totals as a footer row
flextable::add_footer_row(top = FALSE, values = col_sums, colwidths = rep(1,length(biomass_for_presentation)))%>%
#get rid of padding around cells
flextable::padding(padding = 0, part = "all")%>%
#align text: center justify everything
flextable::align(align = 'center', part = 'all')%>%
#add horizontal border on top and bottom of table
flextable::hline_top(part="all", border = table_border)%>%
flextable::hline_bottom(part="all", border = table_border)
#create a function to format catch weights and percents and numbers percents conditionally:
#if values = NA, label as '-'
#If values are <=0.01, label as '<0.01';
#otherwise, format the value as having a single decimal point for display;
pretty_nums_function = function(x) ifelse(x > 0.01 | is.na(x),
ifelse(is.na(x), '-', formatC(x, format="f", digits = 2, big.mark=",")),
'<0.01')
#to format all the columns that could exist (i.e. different years will have different numbers of reporting columns),
#we need a named list of column names and the function to apply to said column;
#this needs to skip the first column too (no need to format 'Length')
funs_list =  stats::setNames(rep(list(pretty_nums_function), length(names(biomass_for_presentation))-1),
names(biomass_for_presentation)[-1])
#apply this function to the specfied table columns
biomass_length_table = flextable::set_formatter(biomass_length_table, values = funs_list)%>%
#set the font and font size
flextable::font(fontname = 'times', part = 'all')%>%
flextable::fontsize(size = 10, part = 'header')%>%
flextable::fontsize(size = 10, part = 'body')
#build the caption
cap_text = paste0('Pollock biomass-at-length estimates (metric tons) by survey region during the ',
unique(biomass_nums_data$year), ' GOA survey.' )
#return table and caption
return(list(biomass_length_table, cap_text))
}
test = build_biomass_at_length_table_summer_goa(biomass_nums_data = biomass_nums_data)
test[[1]]
test[[2]]
biomass_nums_data = current_survey_pollock_biomass_nums
biomass_nums_data = biomass_nums_data[,2, 6:8]
biomass_nums_data = biomass_nums_data[,2:8]
biomass_nums_data = current_survey_pollock_biomass_nums
biomass_nums_data = biomass_nums_data[,8]
biomass_nums_data = current_survey_pollock_biomass_nums
biomass_nums_data = biomass_nums_data[,2:8]
test = build_biomass_at_length_table_summer_goa(biomass_nums_data = biomass_nums_data)
biomass_nums_data = current_survey_pollock_biomass_nums
biomass_nums_data$year = as.character(biomass_nums_data$year)
test = build_biomass_at_length_table_summer_goa(biomass_nums_data = biomass_nums_data)
biomass_nums_data = current_survey_pollock_biomass_nums
biomass_nums_data$LENGTH[100] = 8
test = build_biomass_at_length_table_summer_goa(biomass_nums_data = biomass_nums_data)
test[[1]]
View(current_survey_pollock_biomass_nums)
1.534037e+04
biomass_nums_data = current_survey_pollock_biomass_nums
test = build_biomass_at_length_table_summer_goa(biomass_nums_data = biomass_nums_data)
test = build_biomass_at_length_table_summer_goa(biomass_nums_data = biomass_nums_data)
test[[1]]
source("~/github/MACEReports/R/build_numbers_at_length_table_summer_goa.R")
source("~/github/MACEReports/R/build_numbers_at_length_table_summer_goa.R")
#build the table and caption
biomass_table_list =
build_biomass_at_length_table_summer_goa(biomass_nums_data = current_survey_pollock_biomass_nums)
#pull out table and caption from the list
biomass_table =  biomass_table_list[[1]]
biomass_caption = biomass_table_list[[2]]
biomass_table
biomass_caption
source("~/github/MACEReports/R/build_numbers_at_length_table_summer_goa.R")
library(MACEReports)
