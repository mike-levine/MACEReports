mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = 'species'))
dat = sf::st_transform(dat, crs = 'EPSG:3338')
mace_basemap = get_basemap_layers(plot_limits_data = dat)
ggplot2::ggplot()+
ggplot2::geom_sf(data =  region_zoom_box)+
ggplot2::geom_sf(data = ak_land, fill = land_fill_color, color = land_outline_color)
dat = sf::st_transform(dat, crs = 'EPSG:3338')
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = 'species'))
library(MACEReports)
library(MACEReports)
library(MACEReports)
dat = data.frame('x' = c(-152.2, -150.3, -159.4),
'y' = c(59.2, 55.8, 55.6),
'z' = c(7500,40000, 28000),
'species' = c('a', 'a', 'b'))
#create an sf dataframe
dat = sf::st_as_sf(dat, coords = c('x', 'y'), crs = 4326, remove = FALSE)
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = 'species'))
dat = sf::st_transform(dat, crs = 'EPSG:3338')
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = 'species'))
get_basemap_layers(plot_limits_data = dat)+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = 'species'))
library(MACEReports)
library(MACEReports)
dat = data.frame('x' = c(-152.2, -150.3, -159.4),
'y' = c(59.2, 55.8, 55.6),
'z' = c(7500,40000, 28000),
'species' = c('a', 'a', 'b'))
#create an sf dataframe
dat = sf::st_as_sf(dat, coords = c('x', 'y'), crs = 4326, remove = FALSE)
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = 'species'))
dat = sf::st_transform(dat, crs = 'EPSG:3338')
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = 'species'))
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = species))
library(MACEReports)
library(MACEReports)
library(MACEReports)
library(MACEReports)
library(MACEReports)
library(MACEReports)
library(MACEReports)
dat = data.frame('x' = c(-152.2, -150.3, -159.4),
'y' = c(59.2, 55.8, 55.6),
'z' = c(7500,40000, 28000),
'species' = c('a', 'a', 'b'))
#create an sf dataframe
dat = sf::st_as_sf(dat, coords = c('x', 'y'), crs = 4326, remove = FALSE)
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = 'species'))
dat = sf::st_transform(dat, crs = 'EPSG:3338')
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = species))
library(MACEReports)
library(MACEReports)
dat = data.frame('x' = c(-152.2, -150.3, -159.4),
'y' = c(59.2, 55.8, 55.6),
'z' = c(7500,40000, 28000),
'species' = c('a', 'a', 'b'))
#create an sf dataframe
dat = sf::st_as_sf(dat, coords = c('x', 'y'), crs = 4326, remove = FALSE)
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = 'species'))
dat = sf::st_transform(dat, crs = 'EPSG:3338')
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = species))
library(MACEReports)
library(MACEReports)
dat = data.frame('x' = c(-152.2, -150.3, -159.4),
'y' = c(59.2, 55.8, 55.6),
'z' = c(7500,40000, 28000),
'species' = c('a', 'a', 'b'))
#create an sf dataframe
dat = sf::st_as_sf(dat, coords = c('x', 'y'), crs = 4326, remove = FALSE)
mace_basemap = get_basemap_layers(plot_limits_data = dat)
library(MACEReports)
library(MACEReports)
library(MACEReports)
dat = data.frame('x' = c(-152.2, -150.3, -159.4),
'y' = c(59.2, 55.8, 55.6),
'z' = c(7500,40000, 28000),
'species' = c('a', 'a', 'b'))
#create an sf dataframe
dat = sf::st_as_sf(dat, coords = c('x', 'y'), crs = 4326, remove = FALSE)
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = 'species'))
dat = sf::st_transform(dat, crs = 'EPSG:3338')
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = species))
library(MACEReports)
library(MACEReports)
dat = data.frame('x' = c(-152.2, -150.3, -159.4),
'y' = c(59.2, 55.8, 55.6),
'z' = c(7500,40000, 28000),
'species' = c('a', 'a', 'b'))
#create an sf dataframe
dat = sf::st_as_sf(dat, coords = c('x', 'y'), crs = 4326, remove = FALSE)
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = 'species'))
dat = sf::st_transform(dat, crs = 'EPSG:3338')
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = species))
mace_basemap = get_basemap_layers(plot_limits_data = dat, management_regions = TRUE)
mace_basemap
library(MACEReports)
library(MACEReports)
dat = data.frame('x' = c(-152.2, -150.3, -159.4),
'y' = c(59.2, 55.8, 55.6),
'z' = c(7500,40000, 28000),
'species' = c('a', 'a', 'b'))
#create an sf dataframe
dat = sf::st_as_sf(dat, coords = c('x', 'y'), crs = 4326, remove = FALSE)
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = 'species'))
dat = sf::st_transform(dat, crs = 'EPSG:3338')
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = species))
mace_basemap = get_basemap_layers(plot_limits_data = dat, management_regions = TRUE)
mace_basemap
mace_basemap = get_basemap_layers(plot_limits_data = dat, alaska_3nmi_buffer = TRUE)
mace_basemap = get_basemap_layers(plot_limits_data = dat, alaska_3nmi_buffer = TRUE)
mace_basemap
mace_basemap = get_basemap_layers(plot_limits_data = dat, management_regions = TRUE)
mace_basemap
mace_basemap = get_basemap_layers(plot_limits_data = dat, alaska_3nmi_buffer = TRUE)
mace_basemap
mace_basemap = get_basemap_layers(plot_limits_data = dat, SSL_critical_habitat = TRUE)
mace_basemap
plot_limits_data = dat
#checks: Make sure we have a sf dataframe WITH a defined CRS for the plot data; stop if not.
if (!"sf" %in% class(plot_limits_data) | is.na(sf::st_crs(plot_limits_data)$input)){
stop('Your plot data must be an sf spatial dataframe with a coordinate reference system (CRS)!')
}
#if an sf dataframe with a valid CRS is present, get the crs
crs = sf::st_crs(plot_limits_data)$input
#check if we've already got a collection of shapefiles/rasters for the requested CRS
map_dir = paste0('inst/mapping_files/', stringr::str_remove(crs, ':'))
map_dir
#open up all the layers we need
ak_land = sf::st_read(paste0(map_dir, '/alaska_land_', stringr::str_remove(crs, ':'), '.gpkg'))
russia_land =  sf::st_read(paste0(map_dir, '/russia_land_', stringr::str_remove(crs, ':'), '.gpkg'))
management_regions = TRUE
SSL_critical_habitat = TRUE
alaska_3nmi_buffer = TRUE
#if the directory exists- we just need to open up the requested files
if (dir.exists(map_dir)){
#open up all the layers we need
ak_land = sf::st_read(paste0(map_dir, '/alaska_land_', stringr::str_remove(crs, ':'), '.gpkg'))
russia_land =  sf::st_read(paste0(map_dir, '/russia_land_', stringr::str_remove(crs, ':'), '.gpkg'))
if (!is.null(management_regions)){
management_regions_layer = sf::st_read(paste0(map_dir, '/alaska_NMFS_management_regions_',
stringr::str_remove(crs, ':'), '.gpkg'))
}
if (!is.null(SSL_critical_habitat)){
SSL_critical_habitat_layer = sf::st_read(paste0(map_dir, '/SSL_critical_habitat_',
stringr::str_remove(crs, ':'), '.gpkg'))
}
if (!is.null(alaska_3nmi_buffer)){
alaska_3nmi_buffer_layer = sf::st_read(paste0(map_dir, '/alaska_3nmi_buffer_',
stringr::str_remove(crs, ':'), '.gpkg'))
}
if (bathy == TRUE){
bathy_raster = terra::rast(paste0(map_dir, '/alaska_bathy_raster_', stringr::str_remove(crs, ':'), '.tif'))
}
}
bathy = TRUE
#if the directory exists- we just need to open up the requested files
if (dir.exists(map_dir)){
#open up all the layers we need
ak_land = sf::st_read(paste0(map_dir, '/alaska_land_', stringr::str_remove(crs, ':'), '.gpkg'))
russia_land =  sf::st_read(paste0(map_dir, '/russia_land_', stringr::str_remove(crs, ':'), '.gpkg'))
if (!is.null(management_regions)){
management_regions_layer = sf::st_read(paste0(map_dir, '/alaska_NMFS_management_regions_',
stringr::str_remove(crs, ':'), '.gpkg'))
}
if (!is.null(SSL_critical_habitat)){
SSL_critical_habitat_layer = sf::st_read(paste0(map_dir, '/SSL_critical_habitat_',
stringr::str_remove(crs, ':'), '.gpkg'))
}
if (!is.null(alaska_3nmi_buffer)){
alaska_3nmi_buffer_layer = sf::st_read(paste0(map_dir, '/alaska_3nmi_buffer_',
stringr::str_remove(crs, ':'), '.gpkg'))
}
if (bathy == TRUE){
bathy_raster = terra::rast(paste0(map_dir, '/alaska_bathy_raster_', stringr::str_remove(crs, ':'), '.tif'))
}
}
dat = data.frame('x' = c(-152.2, -150.3, -159.4),
'y' = c(59.2, 55.8, 55.6),
'z' = c(7500,40000, 28000),
'species' = c('a', 'a', 'b'))
#create an sf dataframe
dat = sf::st_as_sf(dat, coords = c('x', 'y'), crs = 4326, remove = FALSE)
#checks: Make sure we have a sf dataframe WITH a defined CRS for the plot data; stop if not.
if (!"sf" %in% class(plot_limits_data) | is.na(sf::st_crs(plot_limits_data)$input)){
stop('Your plot data must be an sf spatial dataframe with a coordinate reference system (CRS)!')
}
#if an sf dataframe with a valid CRS is present, get the crs
crs = sf::st_crs(plot_limits_data)$input
plot_limits_data = dat
#checks: Make sure we have a sf dataframe WITH a defined CRS for the plot data; stop if not.
if (!"sf" %in% class(plot_limits_data) | is.na(sf::st_crs(plot_limits_data)$input)){
stop('Your plot data must be an sf spatial dataframe with a coordinate reference system (CRS)!')
}
#if an sf dataframe with a valid CRS is present, get the crs
crs = sf::st_crs(plot_limits_data)$input
#check if we've already got a collection of shapefiles/rasters for the requested CRS
map_dir = paste0('inst/mapping_files/', stringr::str_remove(crs, ':'))
#if the directory exists- we just need to open up the requested files
if (dir.exists(map_dir)){
#open up all the layers we need
ak_land = sf::st_read(paste0(map_dir, '/alaska_land_', stringr::str_remove(crs, ':'), '.gpkg'))
russia_land =  sf::st_read(paste0(map_dir, '/russia_land_', stringr::str_remove(crs, ':'), '.gpkg'))
if (!is.null(management_regions)){
management_regions_layer = sf::st_read(paste0(map_dir, '/alaska_NMFS_management_regions_',
stringr::str_remove(crs, ':'), '.gpkg'))
}
if (!is.null(SSL_critical_habitat)){
SSL_critical_habitat_layer = sf::st_read(paste0(map_dir, '/SSL_critical_habitat_',
stringr::str_remove(crs, ':'), '.gpkg'))
}
if (!is.null(alaska_3nmi_buffer)){
alaska_3nmi_buffer_layer = sf::st_read(paste0(map_dir, '/alaska_3nmi_buffer_',
stringr::str_remove(crs, ':'), '.gpkg'))
}
if (bathy == TRUE){
bathy_raster = terra::rast(paste0(map_dir, '/alaska_bathy_raster_', stringr::str_remove(crs, ':'), '.tif'))
}
}
!dir.exists(map_dir)
message(paste0('Creating new basemap features for ', crs, '.'))
#create the folders we'll need to populate if they don't exist
dir.create(map_dir)
#open the shapefiles (from 3338- since these are included to start with)
ak_land = sf::st_read('inst/mapping_files/EPSG3338/alaska_land_EPSG3338.gpkg')
russia_land = sf::st_read('inst/mapping_files/EPSG3338/russia_land_EPSG3338.gpkg')
management_regions_layer = sf::st_read('inst/mapping_files/EPSG3338/alaska_NMFS_management_regions_EPSG3338.gpkg')
SSL_critical_habitat_layer = sf::st_read('inst/mapping_files/EPSG3338/SSL_critical_habitat_EPSG3338.gpkg')
alaska_3nmi_buffer_layer = sf::st_read('inst/mapping_files/EPSG3338//alaska_3nmi_buffer_EPSG3338.gpkg')
#convert to the requested projection
ak_land = sf::st_transform(ak_land, crs = crs)
russia_land = sf::st_transform(russia_land, crs = crs)
management_regions_layer = sf::st_transform(management_regions_layer, crs = crs)
SSL_critical_habitat_layer = sf::st_transform(SSL_critical_habitat_layer, crs = crs)
alaska_3nmi_buffer_layer = sf::st_transform(alaska_3nmi_buffer_layer, crs = crs)
#save converted files
sf::st_write(ak_land, dsn = paste0(map_dir, '/alaska_land_', stringr::str_remove(crs, ':'), '.gpkg'),
delete_dsn = TRUE)
sf::st_write(russia_land, dsn = paste0(map_dir, '/russia_land_', stringr::str_remove(crs, ':'), '.gpkg'),
delete_dsn = TRUE)
sf::st_write(management_regions_layer, dsn = paste0(map_dir, '/alaska_NMFS_management_regions_',
stringr::str_remove(crs, ':'), '.gpkg'), delete_dsn = TRUE)
sf::st_write(SSL_critical_habitat_layer, dsn = paste0(map_dir, '/SSL_critical_habitat_',
stringr::str_remove(crs, ':'), '.gpkg'), delete_dsn = TRUE)
sf::st_write(alaska_3nmi_buffer_layer, dsn = paste0(map_dir, '/alaska_3nmi_buffer_',
stringr::str_remove(crs, ':'), '.gpkg'), delete_dsn = TRUE)
View(management_regions_layer)
#again, start with the 3338 layer
bathy_raster = terra::rast('inst/mapping_files/EPSG3338/alaska_bathy_raster_EPSG3338.tif')
#convert it
bathy_raster = terra::project(bathy_raster, crs, method = "bilinear")
#up the resolution
bathy_raster = terra::disagg(bathy_raster, fact = c(5, 5), method = 'near')
#and save it
terra::writeRaster(bathy_raster, filename = paste0(map_dir, '/alaska_bathy_raster_',
stringr::str_remove(crs, ':'), '.tif'))
dat = data.frame('x' = c(-152.2, -150.3, -159.4),
'y' = c(59.2, 55.8, 55.6),
'z' = c(7500,40000, 28000),
'species' = c('a', 'a', 'b'))
#create an sf dataframe
dat = sf::st_as_sf(dat, coords = c('x', 'y'), crs = 4326, remove = FALSE)
dat = sf::st_transform(dat, crs = 'EPSG:3338')
plot_limits_data = dat
#checks: Make sure we have a sf dataframe WITH a defined CRS for the plot data; stop if not.
if (!"sf" %in% class(plot_limits_data) | is.na(sf::st_crs(plot_limits_data)$input)){
stop('Your plot data must be an sf spatial dataframe with a coordinate reference system (CRS)!')
}
#if an sf dataframe with a valid CRS is present, get the crs
crs = sf::st_crs(plot_limits_data)$input
#check if we've already got a collection of shapefiles/rasters for the requested CRS
map_dir = paste0('inst/mapping_files/', stringr::str_remove(crs, ':'))
#open up all the layers we need
ak_land = sf::st_read(paste0(map_dir, '/alaska_land_', stringr::str_remove(crs, ':'), '.gpkg'))
russia_land =  sf::st_read(paste0(map_dir, '/russia_land_', stringr::str_remove(crs, ':'), '.gpkg'))
management_regions_layer = sf::st_read(paste0(map_dir, '/alaska_NMFS_management_regions_',
stringr::str_remove(crs, ':'), '.gpkg'))
colnames(management_regions_layer)
library(MACEReports)
library(MACEReports)
library(MACEReports)
library(MACEReports)
library(MACEReports)
library(MACEReports)
library(MACEReports)
library(MACEReports)
library(MACEReports)
dat = data.frame('x' = c(-152.2, -150.3, -159.4),
'y' = c(59.2, 55.8, 55.6),
'z' = c(7500,40000, 28000),
'species' = c('a', 'a', 'b'))
#create an sf dataframe
dat = sf::st_as_sf(dat, coords = c('x', 'y'), crs = 4326, remove = FALSE)
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = 'species'))
library(MACEReports)
dat = sf::st_transform(dat, crs = 'EPSG:3338')
plot_limits_data = dat
bathy = TRUE
#checks: Make sure we have a sf dataframe WITH a defined CRS for the plot data; stop if not.
if (!"sf" %in% class(plot_limits_data) | is.na(sf::st_crs(plot_limits_data)$input)){
stop('Your plot data must be an sf spatial dataframe with a coordinate reference system (CRS)!')
}
#if an sf dataframe with a valid CRS is present, get the crs
crs = sf::st_crs(plot_limits_data)$input
#check if we've already got a collection of shapefiles/rasters for the requested CRS
map_dir = paste0('maps/mapping_files/', stringr::str_remove(crs, ':'))
dir.exists(map_dir)
#open up all the layers we need
ak_land = sf::st_read(paste0(map_dir, '/alaska_land_', stringr::str_remove(crs, ':'), '.gpkg'))
russia_land =  sf::st_read(paste0(map_dir, '/russia_land_', stringr::str_remove(crs, ':'), '.gpkg'))
library(MACEReports)
library(MACEReports)
library(MACEReports)
#checks: Make sure we have a sf dataframe WITH a defined CRS for the plot data; stop if not.
if (!"sf" %in% class(plot_limits_data) | is.na(sf::st_crs(plot_limits_data)$input)){
stop('Your plot data must be an sf spatial dataframe with a coordinate reference system (CRS)!')
}
#if an sf dataframe with a valid CRS is present, get the crs
crs = sf::st_crs(plot_limits_data)$input
#check if we've already got a collection of shapefiles/rasters for the requested CRS
map_dir = paste0('maps/mapping_files/', stringr::str_remove(crs, ':'))
map_dir
dir.exists(map_dir)
!dir.exists(map_dir)
#create the folders we'll need to populate if they don't exist
dir.create(map_dir)
map_dir
dat = data.frame('x' = c(-152.2, -150.3, -159.4),
'y' = c(55.2, 55.8, 55.6),
'z' = c(7500,40000, 28000),
'species' = c('a', 'a', 'b'))
#create an sf dataframe
dat = sf::st_as_sf(dat, coords = c('x', 'y'), crs = 4326)
#convert CRS to a reasonable projection
dat = sf::st_transform(dat, crs = 'EPSG:3338')
#return the basemap as a \code{ggplot} layer
mace_basemap = get_basemap_layers(plot_limits_data = dat)
#open the shapefiles (from 3338- since these are included to start with)
ak_land = sf::st_read('maps/mapping_files/EPSG3338/alaska_land_EPSG3338.gpkg')
library(MACEReports)
library(MACEReports)
library(MACEReports)
dat = data.frame('x' = c(-152.2, -150.3, -159.4),
'y' = c(59.2, 55.8, 55.6),
'z' = c(7500,40000, 28000),
'species' = c('a', 'a', 'b'))
#create an sf dataframe
dat = sf::st_as_sf(dat, coords = c('x', 'y'), crs = 4326, remove = FALSE)
mace_basemap = get_basemap_layers(plot_limits_data = dat)
dat = sf::st_transform(dat, crs = 'EPSG:3338')
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = 'species'))
plot_limits_data = dat
bathy = TRUE
management_regions = NULL
SSL_critical_habitat = NULL
alaska_3nmi_buffer = NULL
#checks: Make sure we have a sf dataframe WITH a defined CRS for the plot data; stop if not.
if (!"sf" %in% class(plot_limits_data) | is.na(sf::st_crs(plot_limits_data)$input)){
stop('Your plot data must be an sf spatial dataframe with a coordinate reference system (CRS)!')
}
#if an sf dataframe with a valid CRS is present, get the crs
crs = sf::st_crs(plot_limits_data)$input
#check if we've already got a collection of shapefiles/rasters for the requested CRS
map_dir = paste0('maps/mapping_files/', stringr::str_remove(crs, ':'))
dir.exists(map_dir)
!dir.exists(map_dir)
#if the directory exists- we just need to open up the requested files
if (dir.exists(map_dir)){
#open up all the layers we need
ak_land = sf::st_read(paste0(map_dir, '/alaska_land_', stringr::str_remove(crs, ':'), '.gpkg'))
russia_land =  sf::st_read(paste0(map_dir, '/russia_land_', stringr::str_remove(crs, ':'), '.gpkg'))
if (!is.null(management_regions)){
management_regions_layer = sf::st_read(paste0(map_dir, '/alaska_NMFS_management_regions_',
stringr::str_remove(crs, ':'), '.gpkg'))
}
if (!is.null(SSL_critical_habitat)){
SSL_critical_habitat_layer = sf::st_read(paste0(map_dir, '/SSL_critical_habitat_',
stringr::str_remove(crs, ':'), '.gpkg'))
}
if (!is.null(alaska_3nmi_buffer)){
alaska_3nmi_buffer_layer = sf::st_read(paste0(map_dir, '/alaska_3nmi_buffer_',
stringr::str_remove(crs, ':'), '.gpkg'))
}
if (bathy == TRUE){
bathy_raster = terra::rast(paste0(map_dir, '/alaska_bathy_raster_', stringr::str_remove(crs, ':'), '.tif'))
}
}
#if we don't have anything for the requested crs, build it
if (!dir.exists(map_dir)){
stop('why?')
message(paste0('Creating new basemap features for ', crs, '.'))
#create the folders we'll need to populate if they don't exist
dir.create(map_dir)
#open the shapefiles (from 3338- since these are included to start with)
ak_land = sf::st_read('maps/mapping_files/EPSG3338/alaska_land_EPSG3338.gpkg')
russia_land = sf::st_read('maps/mapping_files/EPSG3338/russia_land_EPSG3338.gpkg')
management_regions_layer = sf::st_read('maps/mapping_files/EPSG3338/alaska_NMFS_management_regions_EPSG3338.gpkg')
SSL_critical_habitat_layer = sf::st_read('maps/mapping_files/EPSG3338/SSL_critical_habitat_EPSG3338.gpkg')
alaska_3nmi_buffer_layer = sf::st_read('maps/mapping_files/EPSG3338//alaska_3nmi_buffer_EPSG3338.gpkg')
#convert to the requested projection
ak_land = sf::st_transform(ak_land, crs = crs)
russia_land = sf::st_transform(russia_land, crs = crs)
management_regions_layer = sf::st_transform(management_regions_layer, crs = crs)
SSL_critical_habitat_layer = sf::st_transform(SSL_critical_habitat_layer, crs = crs)
alaska_3nmi_buffer_layer = sf::st_transform(alaska_3nmi_buffer_layer, crs = crs)
#save converted files
sf::st_write(ak_land, dsn = paste0(map_dir, '/alaska_land_', stringr::str_remove(crs, ':'), '.gpkg'),
delete_dsn = TRUE)
sf::st_write(russia_land, dsn = paste0(map_dir, '/russia_land_', stringr::str_remove(crs, ':'), '.gpkg'),
delete_dsn = TRUE)
sf::st_write(management_regions_layer, dsn = paste0(map_dir, '/alaska_NMFS_management_regions_',
stringr::str_remove(crs, ':'), '.gpkg'), delete_dsn = TRUE)
sf::st_write(SSL_critical_habitat_layer, dsn = paste0(map_dir, '/SSL_critical_habitat_',
stringr::str_remove(crs, ':'), '.gpkg'), delete_dsn = TRUE)
sf::st_write(alaska_3nmi_buffer_layer, dsn = paste0(map_dir, '/alaska_3nmi_buffer_',
stringr::str_remove(crs, ':'), '.gpkg'), delete_dsn = TRUE)
if (bathy == TRUE){
#again, start with the 3338 layer
bathy_raster = terra::rast('maps/mapping_files/EPSG3338/alaska_bathy_raster_EPSG3338.tif')
#convert it
bathy_raster = terra::project(bathy_raster, crs, method = "bilinear")
#up the resolution
bathy_raster = terra::disagg(bathy_raster, fact = c(5, 5), method = 'near')
#and save it
terra::writeRaster(bathy_raster, filename = paste0(map_dir, '/alaska_bathy_raster_',
stringr::str_remove(crs, ':'), '.tif'))
}
}
map_dir
dir.exists("maps/mapping_files/EPSG3338")
dir.exists(.map_dir)
dir.exists("./maps/mapping_files/EPSG3338")
#check if we've already got a collection of shapefiles/rasters for the requested CRS
map_dir = paste0('./maps/mapping_files/', stringr::str_remove(crs, ':'))
dir.exists(map_dir)
#open up all the layers we need
ak_land = sf::st_read(paste0(map_dir, '/alaska_land_', stringr::str_remove(crs, ':'), '.gpkg'))
library(MACEReports)
dat = data.frame('x' = c(-152.2, -150.3, -159.4),
'y' = c(59.2, 55.8, 55.6),
'z' = c(7500,40000, 28000),
'species' = c('a', 'a', 'b'))
#create an sf dataframe
dat = sf::st_as_sf(dat, coords = c('x', 'y'), crs = 4326, remove = FALSE)
library(MACEReports)
dat = sf::st_transform(dat, crs = 'EPSG:3338')
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = 'species'))
dat = data.frame('x' = c(-152.2, -150.3, -159.4),
'y' = c(59.2, 55.8, 55.6),
'z' = c(7500,40000, 28000),
'species' = c('a', 'a', 'b'))
#create an sf dataframe
dat = sf::st_as_sf(dat, coords = c('x', 'y'), crs = 4326, remove = FALSE)
mace_basemap = get_basemap_layers(plot_limits_data = dat)
library(MACEReports)
library(MACEReports)
dat = data.frame('x' = c(-152.2, -150.3, -159.4),
'y' = c(59.2, 55.8, 55.6),
'z' = c(7500,40000, 28000),
'species' = c('a', 'a', 'b'))
#create an sf dataframe
dat = sf::st_as_sf(dat, coords = c('x', 'y'), crs = 4326, remove = FALSE)
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = 'species'))
dat = sf::st_transform(dat, crs = 'EPSG:3338')
mace_basemap = get_basemap_layers(plot_limits_data = dat)
mace_basemap+
ggplot2::geom_sf(data = dat, ggplot2::aes(color = species))
list.files(map_dir)
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
install.packages("devtools")
